import tornado.httpserver, tornado.ioloop, tornado.options, tornado.web, os.path, random, string
from tornado.options import define, options
import subprocess, tempfile

define("port", default=8888, help="run on the given port", type=int)

class Application(tornado.web.Application):
    def __init__(self):
        handlers = [
            (r"/", IndexHandler),
            (r"/upload", UploadHandler)
        ]
        settings = dict(
            debug="True",
            template_path=os.path.join(os.path.dirname(__file__), "templates"),
            static_path=os.path.join(os.path.dirname(__file__), "static"),
        )
        tornado.web.Application.__init__(self, handlers, **settings)
        
class IndexHandler(tornado.web.RequestHandler):
    def get(self):
#        self.render("upload_form.html")
        self.render("index.html")
class UploadHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def post(self):
        file_to_print = self.request.files['print-upload'][0]
        netid = self.get_argument('net-id')
        args = self.request.arguments

        output_file = tempfile.NamedTemporaryFile(prefix=netid, dir='tmp', delete=False)
        output_file.write(file_to_print['body'])
        output_file.close()

        args['filepath'] = output_file.name
        print_options = self.post_to_lp(args)
        self.send_print_command(print_options)
        os.unlink(output_file.name)    
        
        self.finish()
    """Translates the POST form data to lp command options
        returns a list containing options"""
    def post_to_lp(self, args):
        print_options = ['lp']
        print_options.append('-U')
        print_options.extend(args['net-id'])
    
        copies = args.get('copies', 1)
        print_options.append('-n')
        print_options.extend(copies)
    
        double = args.get('double-sided','yes')
        if double == 'no':
            double = 'sides=one-sided'
        else:
            double = 'sides=two-sided-long-edge'
        pages = args['pages']
        print pages
        print len(pages)
        # check for empty string
        if pages[0] == '':
            print_options.extend(['-o',double])
        else:
            print_options.extend(['-o',double + ' page-ranges='+pages[0]])
        
        filepath = args['filepath']
        i = filepath.rfind('/')
        filepath = filepath[i+1:]
        print_options.append(str(filepath))
        return print_options
    
    """Executes an lp print command on a subprocess. 
       print_options is a list containing the specified print options
       generated by post"""
    def send_print_command(self, print_options):
        self.write("Executing print commad")
        print print_options
        tempdir = os.path.join(os.getcwd(), 'tmp')
        os.chdir(tempdir)
        print os.getcwd()
        subprocess.call(print_options)
        os.chdir('..')
        #self.finish()
                
def main():
    http_server = tornado.httpserver.HTTPServer(Application())
    http_server.listen(options.port)
    print "ePrint server is now running on port: %d" % options.port
    tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
    main()
